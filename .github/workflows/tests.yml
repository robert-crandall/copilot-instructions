name: Tests

on:
  pull_request:
    branches: [main]
  # Allow this workflow to be called by other workflows
  workflow_call:
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: write   # needed to push bun.lock updates for Dependabot PRs

jobs:
  tests:
    runs-on: ubuntu-latest

    # Add PostgreSQL service
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: example_app
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test environment variables
      DATABASE_URL: postgres://test:test@localhost:5432/example_app
      JWT_SECRET: test-jwt-secret-at-least-32-characters-long-for-testing
      NODE_ENV: test
      PORT: 3000
      TZ: America/Los_Angeles
      ALLOW_REGISTRATION: true
      FRONTEND_URL: http://localhost:4173

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # needed so we can push back to the PR branch

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 'latest'

      # Cheap checks first
      # Backend setup and tests
      # --- Lockfile management -------------------------------------------------
      # We no longer use a frozen lockfile so that Dependabot updates can resolve
      # and refresh transitive dependencies. To keep human PRs disciplined:
      #  * If bun.lock changes on a non-Dependabot PR, the build fails asking
      #    the contributor to commit the updated lockfile.
      #  * If the actor is Dependabot, we auto-commit the refreshed bun.lock.
      # This preserves reproducibility while allowing automated dependency bumps.
      - name: Record initial bun.lock hash
        id: lock_pre
        run: |
          if [ -f bun.lock ]; then
            echo "hash=$(sha256sum bun.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "hash=absent" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        working-directory: ./
        run: bun install

      - name: Detect bun.lock changes
        id: lock_post
        run: |
          if [ -f bun.lock ]; then
            echo "new_hash=$(sha256sum bun.lock | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          else
            echo "new_hash=absent" >> $GITHUB_OUTPUT
          fi
          echo "pre_hash=${{ steps.lock_pre.outputs.hash }}" >> $GITHUB_OUTPUT

      - name: Fail if bun.lock changed (non-Dependabot)
        if: ${{ steps.lock_pre.outputs.hash != steps.lock_post.outputs.new_hash && github.actor != 'dependabot[bot]' }}
        run: |
          echo "bun.lock changed after install. Please commit the updated lockfile." >&2
          git --no-pager diff --name-only
          exit 1

      - name: Auto-commit updated bun.lock (Dependabot only)
        if: ${{ steps.lock_pre.outputs.hash != steps.lock_post.outputs.new_hash && github.actor == 'dependabot[bot]' }}
        env:
          PR_BRANCH: ${{ github.head_ref }}
        run: |
          set -euo pipefail
          echo "Dependabot detected bun.lock change; preparing auto-commit."
          echo "PR branch: ${PR_BRANCH}"

          if [ -z "${PR_BRANCH}" ]; then
            echo "github.head_ref is empty; attempting to derive current branch." >&2
            PR_BRANCH=$(git rev-parse --abbrev-ref HEAD || echo '')
          fi

          if [ -z "${PR_BRANCH}" ] || [ "${PR_BRANCH}" = "HEAD" ]; then
            echo "Cannot determine PR branch name; aborting auto-commit." >&2
            exit 1
          fi

          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

          git --no-pager diff --name-status || true

          git add bun.lock
          if git diff --cached --quiet; then
            echo "No staged changes after add; skipping commit."; exit 0; fi

          git commit -m 'chore: update bun.lock (auto-commit from CI for Dependabot)'

          # Retry push up to 3 times in case of race with another workflow
          for attempt in 1 2 3; do
            if git push origin "HEAD:${PR_BRANCH}"; then
              echo "Push succeeded (attempt ${attempt})."; break; fi
            echo "Push failed (attempt ${attempt})." >&2
            if [ "${attempt}" = "3" ]; then
              echo "Giving up after 3 attempts." >&2; exit 1; fi
            echo "Fetching latest and retrying..."; git fetch origin "${PR_BRANCH}" --depth=1; sleep 2;
          done

      - name: Run backend database migrations
        working-directory: ./
        run: bun run db:migrate

      - name: Run backend type checking
        working-directory: ./backend
        run: bun run check

      - name: Run frontend type checking
        working-directory: ./frontend
        run: bun run check

      - name: Run frontend linting
        working-directory: ./frontend
        run: bun run lint

      - name: Build frontend
        working-directory: ./frontend
        run: bun run build

      # Expensive checks
      - name: Run backend tests
        working-directory: ./backend
        run: bun test

        # TODO: Uncomment when frontend tests are ready
      # - name: Run frontend tests
      #   working-directory: ./frontend
      #   run: bun test
